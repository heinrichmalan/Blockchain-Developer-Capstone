// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require("SquareVerifier");

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
let proof = require("../../zokrates/code/square/proof.json");
let { inputs } = proof;
let { proof: proofParts } = proof;
// Test verification with incorrect proof

contract("TestSquareVerifier", (accounts) => {
    const account_one = accounts[0];
    const account_two = accounts[1];

    describe("proof verification", function () {
        it("correctly verifies a correct proof", async () => {
            let instance = await SquareVerifier.deployed();

            let res = await instance.verifyTx.call(
                proofParts.a,
                proofParts.b,
                proofParts.c,
                inputs
            );
            assert.equal(res, true);
        });

        it("fails to verify an incorrect proof", async () => {
            let instance = await SquareVerifier.deployed();

            proofParts.a = [
                "0x111f9a1ef227fd825164870d4187b036bf241853bdc759655337d2258ede8e1e",
                "0x063ba92c52cff4865a6746e64e9cfbe0b08a1c7e8ea00d4cea2965cf9413fda4",
            ];

            try {
                let res = await instance.verifyTx.call(
                    proofParts.a,
                    proofParts.b,
                    proofParts.c,
                    inputs
                );
                expect(res).to.be.false;
            } catch (err) {}
        });
    });
});
